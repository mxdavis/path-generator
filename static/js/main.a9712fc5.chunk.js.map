{"version":3,"sources":["logic/generator.ts","components/Form.tsx","components/Instructions.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Generator","originPath","importPath","Object","classCallCheck","this","originPathArray","importPathArray","samePath","splitPath","createClass","key","value","path","split","i","length","splice","join","get","checkWhenDifferent","generatePath","Form","_useState","useState","_useState2","slicedToArray","setImportPath","_useState3","_useState4","filePath","setFilePath","invalidPath","test","handleOnClick","event","target","react_default","a","createElement","type","onClick","onChange","Instructions","App","className","Instructions_Instructions","Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9712fc5.chunk.js","sourcesContent":["export class Generator {\n  private originPathArray: string[]\n  private importPathArray: string[]\n  private samePath: boolean\n\n  public constructor(originPath: string, importPath: string) {\n    this.originPathArray = this.splitPath(originPath)\n    this.importPathArray = this.splitPath(importPath)\n    this.samePath = originPath === importPath\n  }\n\n  private splitPath(path: string): string[] {\n    return path.split('/')\n  }\n\n  private checkWhenDifferent(): void {\n    let i = 0\n    while (i < this.originPathArray.length) {\n      if (this.originPathArray[i] === this.importPathArray[i]) i++\n      else {\n        this.originPathArray = this.originPathArray.splice(i)\n        this.importPathArray = this.importPathArray.splice(i)\n        return\n      }\n    }\n  }\n\n  private generatePath(): string {\n    if (this.originPathArray.length === 1) {\n      return './' + this.importPathArray.join('/')\n    } else {\n      let path = ''\n      let i = 0\n      for (i; i < this.originPathArray.length - 1; i++) {\n        path += '../'\n      }\n      return path + this.importPathArray.join('/')\n    }\n  }\n\n  public get path(): string {\n    if (this.samePath) return 'Origin and Import are Same'\n\n    this.checkWhenDifferent()\n    return this.generatePath()\n  }\n}\n","import React, { useState } from 'react'\nimport { Generator } from '../logic/generator'\n\nexport const Form = (): JSX.Element => {\n  const defaultImportPathValue = 'Set Import Path'\n  const defaultFilePathValue = 'Set File Path'\n\n  const [importPath, setImportPath] = useState(defaultImportPathValue)\n  const [filePath, setFilePath] = useState(defaultFilePathValue)\n\n  const invalidPath = (path: string): boolean => path.length < 4 || /\\s/.test(path)\n\n  const message = (): string => {\n    if (invalidPath(importPath)) return 'Enter the relative path for the file you want to insert'\n    if (invalidPath(filePath)) return 'Enter the relative path for the file you are working in'\n    const path: string = new Generator(filePath, importPath).path\n    return 'import ' + path\n  }\n\n  const handleOnClick = (event: React.MouseEvent<HTMLInputElement>): void => {\n    const value = (event.target as HTMLButtonElement).value\n    if (value === defaultImportPathValue) return setImportPath('')\n    if (value === defaultFilePathValue) return setFilePath('')\n  }\n\n  return (\n    <div>\n      <form>\n        <input\n          type=\"text\"\n          onClick={(event: React.MouseEvent<HTMLInputElement>): void => {\n            return handleOnClick(event)\n          }}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n            return setImportPath(event.target.value)\n          }}\n          value={importPath}\n        />\n        <input\n          type=\"text\"\n          onClick={(event: React.MouseEvent<HTMLInputElement>): void => {\n            return handleOnClick(event)\n          }}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n            return setFilePath(event.target.value)\n          }}\n          value={filePath}\n        />\n      </form>\n\n      {message()}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Instructions = (): JSX.Element => {\n  return <div>Here are some instructions for my lovely app</div>\n}\n","import React from 'react'\nimport './App.css'\nimport { Form } from './components/Form'\nimport { Instructions } from './components/Instructions'\n\nconst App: React.FC = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Instructions />\n        <Form />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}